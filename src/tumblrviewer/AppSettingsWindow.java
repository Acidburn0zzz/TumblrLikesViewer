/*
 * Copyright (C) 2013 Jonathan <jay-to-the-dee@users.noreply.github.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package tumblrviewer;

import java.util.HashMap;
import java.util.Map.Entry;
import java.util.prefs.Preferences;
import javax.swing.*;

/**
 *
 * @author Jonathan <jay-to-the-dee@users.noreply.github.com>
 */
public class AppSettingsWindow extends javax.swing.JFrame
{
    private final HashMap<JComponent, String> guiToSettingNameMap;
    private final Preferences prefs;

    /**
     * Creates new form AppConfigurationWindow
     */
    public AppSettingsWindow()
    {
        initComponents();
        guiToSettingNameMap = new HashMap<>();
        guiToSettingNameMap.put(autoLoadAtPageEndCheckbox, "AUTO_LOAD_AT_PAGE_END");
        guiToSettingNameMap.put(preferredPhotoSizeComboBox, "PHOTO_PREFERRED_SIZE");
        guiToSettingNameMap.put(postsLoadedPerUpdateSpinner, "POSTS_LOADED_PER_UPDATE");
        guiToSettingNameMap.put(singleViewModeCheckBox, "SINGLE_VIEW_MODE");
        prefs = MainViewGUI.prefs;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        saveButton = new javax.swing.JButton();
        preferredPhotoSizeComboBox = new javax.swing.JComboBox();
        preferredPhotoSizeLabel = new javax.swing.JLabel();
        autoLoadAtPageEndCheckbox = new javax.swing.JCheckBox();
        autoLoadAtPageEndLabel = new javax.swing.JLabel();
        postsLoadedPerUpdateLabel = new javax.swing.JLabel();
        postsLoadedPerUpdateSpinner = new javax.swing.JSpinner();
        singleViewModeLabel = new javax.swing.JLabel();
        singleViewModeCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("App Settings");
        setMinimumSize(getPreferredSize());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                loadSettingsIntoForm(evt);
            }
        });

        saveButton.setMnemonic('s');
        saveButton.setText("Save & Close");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        preferredPhotoSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "250", "400", "500" }));
        preferredPhotoSizeComboBox.setSelectedIndex(3);

        preferredPhotoSizeLabel.setDisplayedMnemonic('p');
        preferredPhotoSizeLabel.setText("Preferred photo size");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, preferredPhotoSizeComboBox, org.jdesktop.beansbinding.ObjectProperty.create(), preferredPhotoSizeLabel, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        autoLoadAtPageEndCheckbox.setSelected(true);

        autoLoadAtPageEndLabel.setDisplayedMnemonic('l');
        autoLoadAtPageEndLabel.setText("Auto-load at page end");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, autoLoadAtPageEndCheckbox, org.jdesktop.beansbinding.ObjectProperty.create(), autoLoadAtPageEndLabel, org.jdesktop.beansbinding.BeanProperty.create("labelFor"), ""); // NOI18N
        bindingGroup.addBinding(binding);

        postsLoadedPerUpdateLabel.setDisplayedMnemonic('u');
        postsLoadedPerUpdateLabel.setText("Posts loaded per update");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, postsLoadedPerUpdateSpinner, org.jdesktop.beansbinding.ObjectProperty.create(), postsLoadedPerUpdateLabel, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        postsLoadedPerUpdateSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 1, 200, 1));

        singleViewModeLabel.setDisplayedMnemonic('v');
        singleViewModeLabel.setText("Single view mode");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, singleViewModeCheckBox, org.jdesktop.beansbinding.ObjectProperty.create(), singleViewModeLabel, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        singleViewModeCheckBox.setSelected(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(preferredPhotoSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(preferredPhotoSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(autoLoadAtPageEndLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(autoLoadAtPageEndCheckbox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(postsLoadedPerUpdateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(postsLoadedPerUpdateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(singleViewModeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(singleViewModeCheckBox)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(autoLoadAtPageEndCheckbox)
                    .addComponent(autoLoadAtPageEndLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preferredPhotoSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preferredPhotoSizeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postsLoadedPerUpdateLabel)
                    .addComponent(postsLoadedPerUpdateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(singleViewModeLabel)
                    .addComponent(singleViewModeCheckBox))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveSettingsFromForm()
    {
        for (Entry<JComponent, String> guiToSettingName : guiToSettingNameMap.entrySet())
        {
            String settingName = guiToSettingName.getValue();
            JComponent guiControl = guiToSettingName.getKey();

            if (guiControl instanceof JCheckBox)
            {
                JCheckBox checkBoxControl = (JCheckBox) guiControl;
                prefs.putBoolean(settingName, checkBoxControl.isSelected());
            }
            else if (guiControl instanceof JComboBox)
            {
                JComboBox comboBoxControl = (JComboBox) guiControl;
                prefs.put(settingName, (String) comboBoxControl.getSelectedItem());
            }
            else if (guiControl instanceof JSpinner)
            {
                JSpinner spinnerControl = (JSpinner) guiControl;
                prefs.putInt(settingName, (int) spinnerControl.getValue());
            }
        }
    }

    private void loadSettingsIntoForm(java.awt.event.WindowEvent evt)//GEN-FIRST:event_loadSettingsIntoForm
    {//GEN-HEADEREND:event_loadSettingsIntoForm
        for (Entry<JComponent, String> guiToSettingName : guiToSettingNameMap.entrySet())
        {
            String settingName = guiToSettingName.getValue();
            JComponent guiControl = guiToSettingName.getKey();

            if (prefs.get(settingName, null) == null)
            {
                //Skip setting if the node doesn't exists so that the sensible GUI default dictates
                continue;
            }

            if (guiControl instanceof JCheckBox)
            {
                JCheckBox checkBoxControl = (JCheckBox) guiControl;
                checkBoxControl.setSelected(prefs.getBoolean(settingName, true));
            }
            else if (guiControl instanceof JComboBox)
            {
                JComboBox comboBoxControl = (JComboBox) guiControl;
                comboBoxControl.setSelectedItem("" + prefs.getInt(settingName, -1));
            }
            else if (guiControl instanceof JSpinner)
            {
                JSpinner spinnerControl = (JSpinner) guiControl;
                spinnerControl.setValue(prefs.getInt(settingName, -1));
            }
        }
    }//GEN-LAST:event_loadSettingsIntoForm

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        saveSettingsFromForm();
        dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoLoadAtPageEndCheckbox;
    private javax.swing.JLabel autoLoadAtPageEndLabel;
    private javax.swing.JLabel postsLoadedPerUpdateLabel;
    private javax.swing.JSpinner postsLoadedPerUpdateSpinner;
    private javax.swing.JComboBox preferredPhotoSizeComboBox;
    private javax.swing.JLabel preferredPhotoSizeLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox singleViewModeCheckBox;
    private javax.swing.JLabel singleViewModeLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
